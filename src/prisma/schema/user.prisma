model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    email    String  @unique
    password String?
    firstName String?
    lastName String?
    name     String?
    image    String?
    phone    String?
    phoneVerified  Boolean @default(false)
    emailVerified  DateTime?


    onboarding_completed Boolean @default(false)

    sessions Session[]

    @@map("users")
    Account Account[]
    UserLinks UserLinks[]
    UserCV UserCV[]
    EmailSettings EmailSettings?
    UserPreferences UserPreferences?
}

enum UserLinksType {
    GITHUB
    LINKEDIN
    TWITTER
    INSTAGRAM
    PORTFOLIO
}

model UserLinks {
    id        String   @id @default(uuid())
    name      UserLinksType
    url       String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([name, userId])
    @@index([name])
}

model UserCV {
    id        String   @id @default(uuid())
    cv_filename      String
    cv_url       String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    primary  Boolean @default(false)
    uploaded_at  DateTime @default(now())

    @@unique([cv_filename, userId])
    @@index([cv_filename])
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @unique @map("session_token")
    accessToken  String?  @map("access_token")
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  id_token          String?
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 

  @@unique([provider, providerAccountId])
  @@map("account")
}

enum EmailProvider {
  SMTP
  RESEND
}

model EmailSettings {
  id        String   @id @default(uuid())
  user_id   String @unique
  user      User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  provider     EmailProvider @default(RESEND)
  smtp_server  String?
  smtp_port    String?
  smtp_email   String?
  hased_smtp_password String?
  hased_resend_api_key String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Template {
  id        String   @id @default(uuid())
  name      String @unique
  type      String

  UserPreferences UserPreferences[]
}

model UserPreferences {
  id        String   @id @default(uuid())
  user_id   String @unique
  user      User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  defaultTemplateId String
  tepmlate  Template @relation(fields: [defaultTemplateId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@unique([user_id, defaultTemplateId])
}